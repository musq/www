DOMAIN DRIVEN DESIGN QUICKLY

3. Model driven design

Design a portion of the software system to reflect the domain
model in a very literal way, so that mapping is obvious. Revisit
the model and modify it to be implemented more naturally in
software, even as you seek to make it reflect deeper insight into
the domain. Demand a single model that serves both purposes
well, in addition to supporting a fluent Ubiquitous Language.

To tightly tie the implementation to a model usually requires
software development tools and languages that support a
modeling paradigm, such as object-oriented programming.

A program written
in a procedural language is usually perceived as a set of
functions, one calling another, and working together to achieve a
certain result. Such a program cannot easily encapsulate
conceptual connections, making mapping between domain and
code difficult to be realized.

Layered Architecture
- User Interface: Responsible for presenting information to the user and
  interpreting user commands
- Application: This is a thin layer which coordinates the application
  activity. It does not contain business logic. It does not hold the
  state of the business objects, but it can hold the state of an
  application task progress
- Domain: This layer contains information about the domain. This is the
  heart of the business software. The state of business objects is held
  here. Persistence of the business objects and possibly their state is
  delegated to the infrastructure layer.
- Infrastructure: This layer acts as a supporting library for all the
  other layers. It provides communication between layers, implements
  persistence for business objects, contains supporting libraries for
  the user interface layer, etc.


